#  Makefile.rules - OCERA make framework common project rules -*- makefile-gmake -*- #OMK:base.omk
#
#  (C) Copyright 2003, 2006, 2007, 2008, 2009  by Pavel Pisa - OCERA team member
#  (C) Copyright 2006, 2007, 2008, 2009 by Michal Sojka - Czech Technical University, FEE, DCE
#
#  Homepage: http://rtime.felk.cvut.cz/omk/
#  Version:  0.1-94-gf0515eb
#
# The OMK build system is distributed under the GNU General Public
# License.  See file COPYING for details.
#
#
#                   This version is adapted for RTEMS build                      #OMK:rtems.omk
#
#
# input variables                                                                #OMK:base.omk
# V                .. if set to 1, full command text is shown else short form is used
# W                .. whole tree - if set to 1, make is always called from the top-level directory
# SUBDIRS          .. list of subdirectories intended for make from actual directory
# default_CONFIG   .. list of default config assignments CONFIG_XXX=y/n ...
# LN_HEADERS       .. if "y", header files are symbolicaly linked instead of copied. #OMK:include.omk
# lib_LIBRARIES    .. list of the user-space libraries                           #OMK:rtems.omk
# shared_LIBRARIES .. list of the user-space shared libraries
# include_HEADERS  .. list of the user-space public header files
# nobase_include_HEADERS .. public headers copied even with directory part
# renamed_include_HEADERS .. public headers copied to the different target name
# bin_PROGRAMS     .. list of the require binary programs
# utils_PROGRAMS   .. list of the development utility programs
# test_PROGRAMS    .. list of the test programs
# xxx_SOURCES      .. list of specific target sources
# xxx_LIBS         .. list of specific target libraries
# INCLUDES         .. additional include directories and defines for user-space
# tar_EMBEDFILES   .. list of tars with embedded files
# LOCAL_CONFIG_H   .. name of local config.h file generated from values          #OMK:config_h.omk
#                     of options defined in the current directory
# config_include_HEADERS .. names of global config files (possibly
#                     with subdirectories)
# xxx_DEFINES      .. list of config directives to be included in
#                     config header file of the name <somedir>/xxx.h
# DOXYGEN          .. if non-empty, generated headers includes Doxygen's @file
# 		      command, so it is possible to document config
# 		      variables.
OMK_RULES_TYPE=rtems                                                             #OMK:Makefile.rules.rtems@
                                                                                 #OMK:base.omk@Makefile.rules.rtems
# We need to ensure definition of sources directory first
ifndef SOURCES_DIR
# Only shell built-in pwd understands -L
SOURCES_DIR := $(shell ( pwd -L ) )
endif

# If we are not called by OMK leaf Makefile...
ifndef MAKERULES_DIR
MAKERULES_DIR := $(abspath $(dir $(filter %Makefile.rules,$(MAKEFILE_LIST))))
endif

# OUTPUT_DIR is the place where _compiled, _build and possible other
# files/directories are created. By default is the same as
# $(MAKERULES_DIR).
ifndef OUTPUT_DIR
OUTPUT_DIR := $(MAKERULES_DIR)
endif

.PHONY: all default check-make-ver omkize

ifdef W
  ifeq ("$(origin W)", "command line")
    OMK_WHOLE_TREE:=$(W)
  endif
endif
ifndef OMK_WHOLE_TREE
  OMK_WHOLE_TREE:=0
endif

ifneq ($(OMK_WHOLE_TREE),1)
all: check-make-ver default
	@echo "Compilation finished"
else
# Run make in the top-level directory
all:
	@$(MAKE) -C $(MAKERULES_DIR) OMK_SERIALIZE_INCLUDED=n SOURCES_DIR=$(MAKERULES_DIR) RELATIVE_DIR="" $(MAKECMDGOALS) W=0
endif

ifdef OMK_TESTSROOT
# Usage: $(call canttest,<error message>)
define canttest
	( echo "$(1)" > $(OUTPUT_DIR)/_canttest; echo "$(1)"; exit 1 )
endef
else
define canttest
	echo "$(1)"
endef
endif

#=========================
# Include the config file

# FIXME: I think CONFIG_FILE_OK variable is useless. We have three
# config files and it is not clearly defined to which file is this
# variable related.
ifneq ($(CONFIG_FILE_OK),y)
ifndef CONFIG_FILE
CONFIG_FILE      := $(OUTPUT_DIR)/config.omk
endif
ifneq ($(wildcard $(CONFIG_FILE)-default),)
-include $(CONFIG_FILE)-default
else
ifneq ($(MAKECMDGOALS),default-config)
$(warning Please, run "make default-config" first)
endif
endif

-include $(OUTPUT_DIR)/config.target

ifneq ($(wildcard $(CONFIG_FILE)),)
-include $(CONFIG_FILE)
CONFIG_FILE_OK = y
endif
endif #$(CONFIG_FILE_OK)


CONFIG_FILES ?= $(wildcard $(CONFIG_FILE)-default) $(wildcard $(OUTPUT_DIR)/config.target) $(wildcard $(CONFIG_FILE))


export SOURCES_DIR MAKERULES_DIR RELATIVE_DIR
export CONFIG_FILE CONFIG_FILES OMK_SERIALIZE_INCLUDED OMK_VERBOSE OMK_SILENT
# OMK_SERIALIZE_INCLUDED has to be exported to submakes because passes
# must to be serialized only in the toplevel make.

ifndef RELATIVE_DIR
RELATIVE_DIR := $(SOURCES_DIR:$(OUTPUT_DIR)%=%)
endif
#$(warning  === RELATIVE_DIR = "$(RELATIVE_DIR)" ===)
override RELATIVE_DIR := $(RELATIVE_DIR:/%=%)
override RELATIVE_DIR := $(RELATIVE_DIR:\\%=%)
#$(warning  RELATIVE_DIR = "$(RELATIVE_DIR)")
override BACK2TOP_DIR := $(shell echo $(RELATIVE_DIR)/ | sed -e 's_//_/_g' -e 's_/\./_/_g' -e 's_^\./__g'  -e 's_\([^/][^/]*\)_.._g' -e 's_/$$__')
#$(warning  BACK2TOP_DIR = "$(BACK2TOP_DIR)")

#$(warning SOURCES_DIR = "$(SOURCES_DIR)")
#$(warning MAKERULES_DIR = "$(OUTPUT_DIR)")
#$(warning RELATIVE_DIR = "$(RELATIVE_DIR)")

# We have to use RELATIVE_PREFIX because of mingw
override RELATIVE_PREFIX := $(RELATIVE_DIR)/
override RELATIVE_PREFIX := $(RELATIVE_PREFIX:/%=%)

#vpath %.c $(SOURCES_DIR)
#vpath %.cc $(SOURCES_DIR)
#vpath %.cxx $(SOURCES_DIR)

# Define srcdir for Automake compatibility
srcdir = $(SOURCES_DIR)

# Defines for quiet compilation
ifdef V
  ifeq ("$(origin V)", "command line")
    OMK_VERBOSE = $(V)
  endif
endif
ifndef OMK_VERBOSE
  OMK_VERBOSE = 0
endif
ifneq ($(OMK_VERBOSE),0)
  Q =
else
  Q = @
endif
ifneq ($(findstring s,$(MAKEFLAGS)),)
  QUIET_CMD_ECHO = true
  OMK_SILENT = 1
else
  QUIET_CMD_ECHO = echo
endif

MAKEFILE_OMK=Makefile.omk
# All subdirectories (even linked ones) containing Makefile.omk
# Usage in Makefile.omk: SUBDIRS = $(ALL_OMK_SUBDIRS)
ALL_OMK_SUBDIRS = $(patsubst %/$(MAKEFILE_OMK),%,$(patsubst $(SOURCES_DIR)/%,%,$(wildcard $(SOURCES_DIR)/*/$(MAKEFILE_OMK))))

# ===================================================================
# We have set up all important variables, so we can check and include
# real OCERA style Makefile.omk now
ifndef OMK_INCLUDED
include $(SOURCES_DIR)/$(MAKEFILE_OMK)
ifeq ($(AUTOMATIC_SUBDIRS),y)
SUBDIRS?=$(ALL_OMK_SUBDIRS)
endif
OMK_INCLUDED := 1
endif

check-make-ver:
	@GOOD_MAKE_VERSION=`echo $(MAKE_VERSION) | sed -n -e 's/^[4-9]\..*\|^3\.9[0-9].*\|^3\.8[1-9].*/y/p'` ; \
	if [ x$$GOOD_MAKE_VERSION != xy ] ; then \
		echo "Your make program version is too old and does not support OMK system." ; \
		echo "Please update to make program 3.81beta1 or newer." ; exit 1 ; \
	fi

distclean dist-clean:
	@$(QUIET_CMD_ECHO) "  RM      $(COMPILED_DIR_NAME) $(BUILD_DIR_NAME)"
	@rm -fr $(OUTPUT_DIR)/$(COMPILED_DIR_NAME)  $(OUTPUT_DIR)/$(BUILD_DIR_NAME)

# Common OMK templates
# ====================

# Syntax: $(call mkdir,<dir name>)
define mkdir_def
	[ -d $(1) ] || mkdir -p $(1) || exit 1
endef

ifneq ($(OMK_VERBOSE),2)
NO_PRINT_DIRECTORY := --no-print-directory
endif

ifeq ($(USE_LEAF_MAKEFILES),n)
export USE_LEAF_MAKEFILES
SUBDIR_MAKEFILE=$(MAKERULES_DIR)/Makefile.rules
SOURCESDIR_MAKEFILE=$(MAKERULES_DIR)/Makefile.rules
else
SUBDIR_MAKEFILE=$(SOURCES_DIR)/$(3)/Makefile
SOURCESDIR_MAKEFILE=$(SOURCES_DIR)/Makefile
endif

pass = $(strip $(1))

# Call a pass in a subdirectory
# Usage: $(call omk_pass_subdir_template,<pass name>,<build dir>,<subdir>)
define omk_pass_subdir_template
.PHONY: $(pass)-$(3)-subdir
$(pass)-submakes: $(pass)-$(3)-subdir
$(pass)-$(3)-subdir:
	@$(call mkdir_def,$(2)/$(3))
	+@$(MAKE) SOURCES_DIR=$(SOURCES_DIR)/$(3) $(NO_PRINT_DIRECTORY) \
		RELATIVE_DIR=$(RELATIVE_PREFIX)$(3) -C $(2)/$(3) \
		-f $(SUBDIR_MAKEFILE) $(pass)-submakes
# In subdirectories we can call submakes directly since passes are
# already serialized on the toplevel make.
endef

ifdef OMK_TESTSROOT
check-target = $(1:%=%-check)
endif

# Call a pass in a subdirectory
# Usage: $(call extra_rules_subdir_template,<subdir>)
define extra_rules_subdir_template
extra-rules-subdirs: extra-rules-$(1)
extra-rules-$(1):
	+@$(MAKE) OMK_SERIALIZE_INCLUDED=n MAKERULES_DIR=$(SOURCES_DIR)/$(1) OUTPUT_DIR=$(OUTPUT_DIR) \
		SOURCES_DIR=$(SOURCES_DIR)/$(1) RELATIVE_DIR=$(RELATIVE_PREFIX)$(1) -C $(SOURCES_DIR)/$(1)
endef

.PHONY: extra-rules-subdirs
extra-rules-subdirs:

$(foreach subdir,$(EXTRA_RULES_SUBDIRS),$(eval $(call extra_rules_subdir_template,$(subdir))))

# Usage: $(call omk_pass_template,<pass name>,<build dir>,[<local make flags>],[<local enable condition>])
define omk_pass_template
.PHONY: $(pass) $(pass)-local $(pass)-check $(pass)-submakes
$(foreach subdir,$(SUBDIRS),$(eval $(call omk_pass_subdir_template,$(pass),$(2),$(subdir))))
$(pass):
# Submakes have to be called this way and not as dependecies for pass
# serialization to work
	+@$(MAKE) SOURCES_DIR=$(SOURCES_DIR) $(NO_PRINT_DIRECTORY) \
		RELATIVE_DIR=$(RELATIVE_DIR) \
		-f $(SOURCESDIR_MAKEFILE) $(pass)-submakes
$(pass)-submakes:
	@true			# Do not emit "nothing to be done" messages

ifneq ($(4)$($(pass)_HOOKS),)
$(pass)-submakes: $(pass)-this-dir
$(pass)-this-dir: $(foreach subdir,$(SUBDIRS),$(pass)-$(subdir)-subdir)
	+@echo "make[omk]: $(pass) in $(RELATIVE_DIR)"
	@$(call mkdir_def,$(2))
	+@$(MAKE) $(NO_PRINT_DIRECTORY) SOURCES_DIR=$(SOURCES_DIR) RELATIVE_DIR=$(RELATIVE_DIR) -C $(2) \
	        -f $(SOURCESDIR_MAKEFILE) $(3) $(check-target) $(1:%=%-local)
$(pass)-local: $($(pass)_HOOKS)
endif
endef

# =======================
# DEFAULT CONFIG PASS

default-config:
	@echo "# Start of OMK config file" > "$(CONFIG_FILE)-default"
	@echo "# This file should not be altered manually" >> "$(CONFIG_FILE)-default"
	@echo "# Overrides should be stored in file $(notdir $(CONFIG_FILE))" >> "$(CONFIG_FILE)-default"
	@echo >> "$(CONFIG_FILE)-default"
	@$(MAKE) $(NO_PRINT_DIRECTORY) -C $(OUTPUT_DIR) \
		RELATIVE_DIR="" SOURCES_DIR=$(OUTPUT_DIR) \
		-f $(OUTPUT_DIR)/Makefile default-config-pass

$(eval $(call omk_pass_template,default-config-pass,$$(LOCAL_BUILD_DIR),,always))

default-config-pass-local:
#	@echo Default config for $(RELATIVE_DIR)
	@echo "# Config for $(RELATIVE_DIR)" >> "$(CONFIG_FILE)-default"
	@$(foreach x, $(default_CONFIG), echo '$(x)' | \
		sed -e 's/^[^=]*=x$$/#\0/' >> "$(CONFIG_FILE)-default" ; )


omkize:
	$(Q)if ! grep -q MAKERULES_DIR Makefile; then \
	   echo "Makefile is not OMK leaf makefile!" >&2; exit 1; \
	fi
	$(Q)for i in `find -L . -name Makefile.omk` ; do \
	   d=`dirname $${i}`; \
	   if ! test -f "$${d}/Makefile.rules" && ( test -f "$${d}/Makefile" && ! cmp --silent Makefile "$${d}/Makefile" ); then \
	      rm -f "$${d}/Makefile"; \
	      cp -v Makefile "$${d}/Makefile"; \
	   fi \
	done
ifeq ($(OMK_VERBOSE),1)                                                          #OMK:include.omk@Makefile.rules.rtems
CPHEADER_FLAGS += -v
LNHEADER_FLAGS += -v
endif

ifneq ($(LN_HEADERS),y)
define cp_cmd
( echo "  CP      $(1:$(OUTPUT_DIR)/%=%) -> $(2:$(OUTPUT_DIR)/%=%)"; cp $(CPHEADER_FLAGS) $(1) $(2) )
endef
else
define cp_cmd
( echo "  LN      $(1:$(OUTPUT_DIR)/%=%) -> $(2:$(OUTPUT_DIR)/%=%)"; [ -f $(1) ] && ln -sf $(LNHEADER_FLAGS) $(1) $(2) )
endef
endif

# TODO: Check modification date of changed header files. If it is
# newer that in source dir, show a warning.

# Syntax: $(call include-pass-template,<include dir>,<keyword>)
define include-pass-template
include-pass-local: include-pass-local-$(2)
include-pass-local-$(2): $$($(2)_GEN_HEADERS) $$(foreach f,$$(renamed_$(2)_GEN_HEADERS),$$(shell echo '$$(f)' | sed -e 's/^\(.*\)->.*$$$$/\1/'))
	@$$(foreach f, $$($(2)_HEADERS), cmp --quiet $$(SOURCES_DIR)/$$(f) $(1)/$$(notdir $$(f)) \
	   || $$(call cp_cmd,$$(SOURCES_DIR)/$$(f),$(1)/$$(notdir $$(f))) || exit 1 ; )
	@$$(foreach f, $$($(2)_GEN_HEADERS), cmp --quiet $$(f) $(1)/$$(notdir $$(f)) \
	   || $$(call cp_cmd,$$(LOCAL_BUILD_DIR)/$$(f),$(1)/$$(notdir $$(f))) || exit 1 ; ) # FIXME: Use correct build dir, then document it
	@$$(foreach f, $$(nobase_$(2)_HEADERS), cmp --quiet $$(SOURCES_DIR)/$$(f) $(1)/$$(f) \
	   || ( mkdir -p $(1)/$$(dir $$(f)) && $$(call cp_cmd,$$(SOURCES_DIR)/$$(f),$(1)/$$(f)) ) || exit 1 ; )
	@$$(foreach f, $$(renamed_$(2)_HEADERS), \
	   srcfname=`echo '$$(f)' | sed -e 's/^\(.*\)->.*$$$$/\1/'` ; destfname=`echo '$$(f)' | sed -e 's/^.*->\(.*\)$$$$/\1/'` ; \
	   cmp --quiet $$(SOURCES_DIR)/$$$${srcfname} $(1)/$$$${destfname} \
	   || ( mkdir -p `dirname $(1)/$$$${destfname}` && $$(call cp_cmd,$$(SOURCES_DIR)/$$$${srcfname},$(1)/$$$${destfname}) ) || exit 1 ; )
	@$$(foreach f, $$(renamed_$(2)_GEN_HEADERS), \
	   srcfname=`echo '$$(f)' | sed -e 's/^\(.*\)->.*$$$$/\1/'` ; destfname=`echo '$$(f)' | sed -e 's/^.*->\(.*\)$$$$/\1/'` ; \
	   cmp --quiet $$$${srcfname} $(1)/$$$${destfname} \
	   || ( mkdir -p `dirname $(1)/$$$${destfname}` && $$(call cp_cmd,$$(LOCAL_BUILD_DIR)/$$$${srcfname},$(1)/$$$${destfname}) ) || exit 1 ; )
endef
                                                                                 #OMK:rtems.omk@Makefile.rules.rtems
ifdef OMK_TESTSROOT
ifeq ($(RTEMS_MAKEFILE_PATH),)
$(error $(shell $(call canttest,RTEMS_MAKEFILE_PATH not defined)))
endif
endif

include $(RTEMS_MAKEFILE_PATH)/Makefile.inc
include $(RTEMS_CUSTOM)
include $(CONFIG.CC)

BUILD_DIR_NAME = _build/$(RTEMS_BSP)
COMPILED_DIR_NAME = _compiled/$(RTEMS_BSP)
GROUP_DIR_NAME =


USER_INCLUDE_DIR := $(MAKERULES_DIR)/$(COMPILED_DIR_NAME)/include
USER_LIB_DIR     := $(MAKERULES_DIR)/$(COMPILED_DIR_NAME)/lib
USER_UTILS_DIR   := $(MAKERULES_DIR)/$(COMPILED_DIR_NAME)/bin-utils
USER_TESTS_DIR   := $(MAKERULES_DIR)/$(COMPILED_DIR_NAME)/bin-tests
USER_BIN_DIR     := $(MAKERULES_DIR)/$(COMPILED_DIR_NAME)/bin
USER_BUILD_DIR   := $(MAKERULES_DIR)/$(BUILD_DIR_NAME)/user

LOCAL_BUILD_DIR  = $(USER_OBJS_DIR)


DEFAULT_INCLUDES = -I $(PROJECT_INCLUDE)

CPPFLAGS  += -I $(USER_INCLUDE_DIR)

CPPFLAGS  += $(CONFIG_OMK_DEFINES)

#CPPFLAGS  += $(AM_CPPFLAGS)
#CFLAGS    += $(AM_CFLAGS)
#CXXFLAGS  += $(AM_CXXFLAGS)
#LDFLAGS   += $(CFLAGS) $(AM_CFLAGS) $(LD_PATHS:%=-L%)

LOADLIBES += -L$(USER_LIB_DIR)

LOADLIBES += $(lib_LOADLIBES:%=-l%)

SOLIB_PICFLAGS += -shared -fpic

ifndef RELATIVE_DIR
RELATIVE_DIR := $(SOURCES_DIR:$(MAKERULES_DIR)%=%)
endif
override RELATIVE_DIR := $(RELATIVE_DIR:/%=%)
override RELATIVE_DIR := $(RELATIVE_DIR:\\%=%)
#$(warning  RELATIVE_DIR $(RELATIVE_DIR))

#$(warning SOURCES_DIR = $(SOURCES_DIR))
#$(warning MAKERULES_DIR = $(MAKERULES_DIR))
#$(warning RELATIVE_DIR = $(RELATIVE_DIR))

#vpath %.c $(SOURCES_DIR)
#vpath %.cc $(SOURCES_DIR)
#vpath %.cxx $(SOURCES_DIR)

USER_OBJS_DIR = $(USER_BUILD_DIR)/$(RELATIVE_DIR)

.PHONY: check-dir

# Some support to serialize some targets for parallel make
ifneq ($(OMK_SERIALIZE_INCLUDED),y)
include-pass: check-dir
library-pass: include-pass
binary-pass: library-pass

override OMK_SERIALIZE_INCLUDED = y
MAKEOVERRIDES := $(filter-out OMK_SERIALIZE_INCLUDED=n,$(MAKEOVERRIDES))
endif

#=====================================================================
# Special rules for target filesystem and data preparation

# Syntax: $(call TARFILE_template,<filename>,<filename2>,<directory>) FIXME: Is this correct?
define TARFILE_template

.PHONY: $(2)

$(2):
	$(Q) ABSOLUTETARFILE=`cd $$(dir $$@) ; pwd`/$$@ ; \
	     ( test -e $$$$ABSOLUTETARFILE && ( cd  $(3) && tar $$(TARFLAGS) -df $$$$ABSOLUTETARFILE ) ) || \
	     ( cd  $(3) && tar $$(TARFLAGS) -cf $$$$ABSOLUTETARFILE . )

$(2).o: $(2)
	@$(QUIET_CMD_ECHO) "  TARFILE $$@"
	$(Q) $(OBJCOPY) -I binary -O elf32-littlearm  $$^ $$@

endef

#=====================================================================
# User-space rules and templates to compile programs, libraries etc.

ifdef USER_RULE_TEMPLATES


#%.lo: %.c
#	$(CC) -o $@ $(LCFLAGS) -c $<

c_o_COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) $(INCLUDES) -DOMK_FOR_USER

cc_o_COMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CXXFLAGS) $(CFLAGS) $(INCLUDES) -DOMK_FOR_USER

S_o_COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) $(ASFLAGS) -DOMK_FOR_USER

# Check GCC version for user build
ifndef CC_MAJOR_VERSION
CC_MAJOR_VERSION := $(shell $(CC) -dumpversion | sed -e 's/\([^.]\)\..*/\1/')
endif
# Prepare suitable define for dependency building
ifeq ($(CC_MAJOR_VERSION),2)
CC_DEPFLAGS = -Wp,-MD,"$@.d.tmp"
else
CC_DEPFLAGS = -MT $@ -MD -MP -MF "$@.d.tmp"
endif


# Syntax: $(call COMPILE_c_o_template,<source>,<target>,<additional c-flags>)
define COMPILE_c_o_template
$(2): $(1) $$(GEN_HEADERS)
	@$(QUIET_CMD_ECHO) "  CC      $$@"
	$(Q) if $$(c_o_COMPILE) $$(CC_DEPFLAGS) $(3) -o $$@ -c $$< ; \
	then mv -f "$$@.d.tmp" "$$@.d" ; \
	else rm -f "$$@.d.tmp" ; exit 1; \
	fi
endef


# Syntax: $(call COMPILE_cc_o_template,<source>,<target>,<additional c-flags>)
define COMPILE_cc_o_template
$(2): $(1) $$(GEN_HEADERS)
	@$(QUIET_CMD_ECHO) "  CXX     $$@"
	$(Q) if $$(cc_o_COMPILE) $$(CC_DEPFLAGS) $(3) -o $$@ -c $$< ; \
	then mv -f "$$@.d.tmp" "$$@.d" ; \
	else rm -f "$$@.d.tmp" ; exit 1; \
	fi
endef


# Syntax: $(call COMPILE_S_o_template,<source>,<target>,<additional c-flags>)
define COMPILE_S_o_template
$(2): $(1) $$(GEN_HEADERS)
	@$(QUIET_CMD_ECHO) "  AS      $$@"
	$(Q) if $$(S_o_COMPILE) -D__ASSEMBLY__ $$(CC_DEPFLAGS) $(3) -o $$@ -c $$< ; \
	then if [ -e "$$@.d.tmp" ] ; then mv -f "$$@.d.tmp" "$$@.d" ; fi ; \
	else rm -f "$$@.d.tmp" ; exit 1; \
	fi
endef

# Syntax: $(call CMETRIC_o_h_template,<object_file>,<target_header>)
define CMETRIC_o_h_template
$(2): $(1)
	@$(QUIET_CMD_ECHO) "  CMETRIC $$@"
	$(Q)if [ -n `dirname $$@` ] ; then \
	      if [ ! -e `dirname $$@` ] ; then \
	        mkdir -p `dirname $$@` ; fi ; fi
	$(Q)echo >$$@ '/* Automatically generated from $$< */'
	$(Q)echo >>$$@ '/* Conditionals to control compilation */'
	$(Q)set -o pipefail ; $(NM) $$< \
		| sed -n 's/^ *0*\(0[0-9A-Fa-f]*\) *A *_cmetric2cond_\([A-Za-z_0-9]*\) */#define \2 0x\1/p' \
		| sort >>$$@
	$(Q)echo >>$$@ '/* Defines from the values defined to symbols */'
	$(Q)set -o pipefail ; $(NM) $$< \
		| sed -n 's/^ *0*\(0[0-9A-Fa-f]*\) *A *_cmetric2def_\([A-Za-z_0-9]*\) */#define \2 0x\1/p' \
		| sort >>$$@
endef

# Syntax: $(call PROGRAM_template,<dir>,<executable-name>,<link-variant>)
define PROGRAM_template
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.c=%.o))
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.cc=%.o))
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.cxx=%.o))
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.S=%.o))
$(1)_OBJS += $$($(1)_EMBEDTARFILES:%=%_tarfile.o)
$(1)_OBJS := $$(sort $$($(1)_OBJS))

USER_OBJS  += $$($(1)_OBJS)
USER_SOURCES += $$($(1)_SOURCES)
USER_EMBEDTARFILES += $$($(1)_EMBEDTARFILES)

$(2)/$(1): $(USER_LIB_DIR)/timestamp

$(2)/$(1): $$($(1)_OBJS)
	@$(QUIET_CMD_ECHO) "  LINK    $$@"
	$(Q) $$(shell if [ -z "$$(filter %.cc,$$($(1)_SOURCES))" ] ; \
	  then echo $$(CC)  $$(CPPFLAGS) $$(AM_CPPFLAGS) $$(AM_CFLAGS) $$(CFLAGS) ; \
	  else echo $$(CXX) $$(CPPFLAGS) $$(AM_CPPFLAGS) $$(AM_CXXFLAGS) $$(CXXFLAGS) ; fi) \
	  $$(AM_LDFLAGS) $$(LDFLAGS) $$($(1)_OBJS) $$(LOADLIBES) $$($(1)_LIBS:%=-l%) \
	  -o $(2)/$(1)
#@echo "$(2)/$(1): \\" >$(USER_OBJS_DIR)/$(1).exe.d
#@sed -n -e 's/^LOAD \(.*\)$$$$/  \1  \\/p' $(USER_OBJS_DIR)/$(1).exe.map  >>$(USER_OBJS_DIR)/$(1).exe.d
#@echo >>$(USER_OBJS_DIR)/$(1).exe.d
#-Wl,-Map,$(USER_OBJS_DIR)/$(1).exe.map
# FIXME: Why the map file was commented out?
endef



# Syntax: $(call LIBRARY_template,<library-name>)
define LIBRARY_template
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.c=%.o))
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.cc=%.o))
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.cxx=%.o))
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.S=%.o))
$(1)_OBJS += $$($(1)_EMBEDTARFILES:%=%_tarfile.o)
$(1)_OBJS := $$(sort $$($(1)_OBJS))

USER_OBJS  += $$($(1)_OBJS)
USER_SOURCES += $$($(1)_SOURCES)
USER_EMBEDTARFILES += $$($(1)_EMBEDTARFILES)

$(USER_LIB_DIR)/lib$(1).a: $$($(1)_OBJS)
	@$(QUIET_CMD_ECHO) "  AR      $$@"
	$(Q) $(AR) rcs $$@ $$^
	@touch $(USER_LIB_DIR)/timestamp
endef



# Syntax: $(call SOLIB_template,<library-name>)
define SOLIB_template
$(1)_OBJSLO += $$(filter %.lo,$$($(1)_SOURCES:%.c=%.lo))
$(1)_OBJSLO += $$(filter %.lo,$$($(1)_SOURCES:%.cc=%.lo))
$(1)_OBJSLO += $$(filter %.lo,$$($(1)_SOURCES:%.cxx=%.lo))
$(1)_OBJSLO += $$(filter %.lo,$$($(1)_SOURCES:%.S=%.lo))
$(1)_OBJS += $$($(1)_EMBEDTARFILES:%=%_tarfile.o)
$(1)_OBJSLO := $$(sort $$($(1)_OBJSLO))

SOLIB_OBJS  += $$($(1)_OBJSLO)
SOLIB_SOURCES += $$($(1)_SOURCES)
USER_EMBEDTARFILES += $$($(1)_EMBEDTARFILES)

$(USER_LIB_DIR)/lib$(1).so: $$($(1)_OBJSLO)
	@$(QUIET_CMD_ECHO) "  LINK    $$@"
	$(Q) $(LD) --shared --soname=lib$(1).so -o $$@ $$^
endef



library-pass-local: $(addprefix $(USER_INCLUDE_DIR)/,$(cmetric_include_HEADERS)) \
		    $(lib_LIBRARIES:%=$(USER_LIB_DIR)/lib%.a) $(shared_LIBRARIES:%=$(USER_LIB_DIR)/lib%.so)

binary-pass-local: $(bin_PROGRAMS:%=$(USER_BIN_DIR)/%) $(utils_PROGRAMS:%=$(USER_UTILS_DIR)/% $(test_PROGRAMS:%=$(USER_TESTS_DIR)/%)

# Special rules for CMETRIC generated headers

$(foreach cmetrh,$(cmetric_include_HEADERS),$(eval $(call COMPILE_c_o_template,\
		$(SOURCES_DIR)/$($(basename $(notdir $(cmetrh)))_CMETRIC_SOURCES),\
		$($(basename $(notdir $(cmetrh)))_CMETRIC_SOURCES:%.c=%.o),)))
$(foreach cmetrh,$(cmetric_include_HEADERS),$(eval $(call CMETRIC_o_h_template,\
		$($(basename $(notdir $(cmetrh)))_CMETRIC_SOURCES:%.c=%.o),\
		$(addprefix $(USER_INCLUDE_DIR)/,$(cmetrh)))))

GEN_HEADERS+=$(cmetric_include_HEADERS:%=$(USER_INCLUDE_DIR)/%)

# Generate rules for compilation of programs and libraries

$(foreach prog,$(utils_PROGRAMS),$(eval $(call PROGRAM_template,$(prog),$(USER_UTILS_DIR))))

$(foreach prog,$(test_PROGRAMS),$(eval $(call PROGRAM_template,$(prog),$(USER_TESTS_DIR))))

$(foreach prog,$(bin_PROGRAMS),$(eval $(call PROGRAM_template,$(prog),$(USER_BIN_DIR))))

$(foreach lib,$(lib_LIBRARIES),$(eval $(call LIBRARY_template,$(lib))))

$(foreach lib,$(shared_LIBRARIES),$(eval $(call SOLIB_template,$(lib))))

-include $(USER_OBJS_DIR)/*.d

endif

#=====================================================================


$(eval $(call omk_pass_template, include-pass,$(USER_OBJS_DIR),,$(include_HEADERS)$(nobase_include_HEADERS)$(renamed_include_HEADERS)$(config_include_HEADERS)$(LOCAL_CONFIG_H)))
$(eval $(call omk_pass_template, library-pass,$(USER_OBJS_DIR),USER_RULE_TEMPLATES=y,$(lib_LIBRARIES)$(shared_LIBRARIES)))
$(eval $(call omk_pass_template, binary-pass, $(USER_OBJS_DIR),USER_RULE_TEMPLATES=y,$(bin_PROGRAMS)$(utils_PROGRAMS)$(test_PROGRAMS)))

$(eval $(call omk_pass_template,clean,$(USER_OBJS_DIR),,always))

check-dir::
	@$(call mkdir_def,$(USER_INCLUDE_DIR))
	@$(call mkdir_def,$(USER_LIB_DIR))
	@$(call mkdir_def,$(USER_BIN_DIR))
	@$(call mkdir_def,$(USER_UTILS_DIR))
	@$(call mkdir_def,$(USER_TESTS_DIR))

$(eval $(call include-pass-template,$(USER_INCLUDE_DIR),include))

ifdef USER_RULE_TEMPLATES

# User-space static libraries and applications object files

USER_SOURCES := $(sort $(USER_SOURCES))

#$(warning USER_SOURCES = $(USER_SOURCES))

$(foreach src,$(filter %.c,$(USER_SOURCES)),$(eval $(call COMPILE_c_o_template,$(SOURCES_DIR)/$(src),$(src:%.c=%.o),)))

$(foreach src,$(filter %.cc,$(USER_SOURCES)),$(eval $(call COMPILE_cc_o_template,$(SOURCES_DIR)/$(src),$(src:%.cc=%.o),)))

$(foreach src,$(filter %.cxx,$(USER_SOURCES)),$(eval $(call COMPILE_cc_o_template,$(SOURCES_DIR)/$(src),$(src:%.cxx=%.o),)))

$(foreach src,$(filter %.S,$(USER_SOURCES)),$(eval $(call COMPILE_S_o_template,$(SOURCES_DIR)/$(src),$(src:%.S=%.o),)))

# User-space shared libraries object files

SOLIB_SOURCES := $(sort $(SOLIB_SOURCES))

#$(warning SOLIB_SOURCES = $(SOLIB_SOURCES))

$(foreach src,$(filter %.c,$(SOLIB_SOURCES)),$(eval $(call COMPILE_c_o_template,$(SOURCES_DIR)/$(src),$(src:%.c=%.lo),$(SOLIB_PICFLAGS))))

$(foreach src,$(filter %.cc,$(SOLIB_SOURCES)),$(eval $(call COMPILE_cc_o_template,$(SOURCES_DIR)/$(src),$(src:%.cc=%.lo),$(SOLIB_PICFLAGS))))

$(foreach src,$(filter %.cxx,$(SOLIB_SOURCES)),$(eval $(call COMPILE_cc_o_template,$(SOURCES_DIR)/$(src),$(src:%.cxx=%.lo),$(SOLIB_PICFLAGS))))

$(foreach src,$(filter %.S,$(SOLIB_SOURCES)),$(eval $(call COMPILE_S_o_template,$(SOURCES_DIR)/$(src),$(src:%.S=%.lo),$(SOLIB_PICFLAGS))))

$(foreach tarfile,$(USER_EMBEDTARFILES),$(eval $(call TARFILE_template,$(tarfile),$(tarfile)_tarfile,$(SOURCES_DIR)/$(tarfile))))

endif


clean-local:
	@echo Cleaning in $(USER_OBJS_DIR)
	@rm -f $(USER_OBJS_DIR)/*.o $(USER_OBJS_DIR)/*.lo \
	       $(USER_OBJS_DIR)/*.d \
	       $(USER_OBJS_DIR)/*.map \
	       $(LOCAL_CONFIG_H:%=$(USER_OBJS_DIR)/%) \
	       $(tar_EMBEDFILES:%=$(USER_OBJS_DIR)/%_tarfile)


default: include-pass library-pass binary-pass
                                                                                 #OMK:config_h.omk@Makefile.rules.rtems
# Syntax: $(call BUILD_CONFIG_H_template,<stamp_dir>,<header_file_path>,<list_of_options_to_export>,<header_barrier>)
define BUILD_CONFIG_H_template

$(addprefix $(1)/,$(notdir $(addsuffix .stamp,$(2)))) : $(CONFIG_FILES)
	@$(QUIET_CMD_ECHO) "  CONFGEN $(notdir $(2))"
	@if [ ! -d `dirname $(2).tmp` ] ; then \
		mkdir -p `dirname $(2).tmp` ; fi
	@echo "/* Automatically generated from */" > "$(2).tmp"
	@echo "/* config files: $$(^:$(OUTPUT_DIR)/%=%) */" >> "$(2).tmp"
	$(if $(DOXYGEN),@echo "/** @file */" >> "$(2).tmp")
	@echo "#ifndef $(4)" >> "$(2).tmp"
	@echo "#define $(4)" >> "$(2).tmp"
	@( $(foreach x, $(shell echo '$($(3))' | tr 'x\t ' 'x\n\n' | sed -e 's/^\([^ =]*\)\(=[^ ]\+\|\)$$/\1/' ), \
		echo '$(x).$($(x))' ; ) echo ; ) | \
		sed -e '/^[^.]*\.n$$$$/d' -e '/^[^.]*\.$$$$/d' -e 's/^\([^.]*\)\.[ym]$$$$/\1.1/' | \
		sed -n -e 's/^\([^.]*\)\.\(.*\)$$$$/#define \1 \2/p' \
		  >> "$(2).tmp"
	@echo "#endif /*$(4)*/" >> "$(2).tmp"
	@touch "$$@"
	@if cmp --quiet "$(2).tmp" "$(2)" ; then rm "$(2).tmp"; \
	else mv "$(2).tmp" "$(2)" ; \
	echo "Updated configuration $(2)" ; fi

endef

ifdef LOCAL_CONFIG_H

# This must be declared after the default cflags are assigned!
# Override is used to override command line assignemnt.
override CFLAGS += -I $(USER_OBJS_DIR)
override kernel_INCLUDES += -I $(KERN_OBJS_DIR)
$(eval $(call BUILD_CONFIG_H_template,$(USER_OBJS_DIR),$(USER_OBJS_DIR)/$(LOCAL_CONFIG_H),default_CONFIG,_LOCAL_CONFIG_H) )

endif

# Special rules for configuration exported headers

#FIXME: The directory for headers should not be specified here.
$(foreach confh,$(config_include_HEADERS),$(eval $(call BUILD_CONFIG_H_template,$(USER_OBJS_DIR),$(addprefix $(USER_INCLUDE_DIR)/,$(confh)),$(basename $(notdir $(confh)))_DEFINES,\
_$(basename $(notdir $(confh)))_H \
)))

config_h_stamp_files = $(addprefix $(USER_OBJS_DIR)/,$(notdir $(addsuffix .stamp,$(config_include_HEADERS) $(LOCAL_CONFIG_H))))

# Add some hooks to standard passes
include-pass-local: $(config_h_stamp_files)

ifneq ($(KERN_CONFIG_HEADERS_REQUIRED),)

ifdef LOCAL_CONFIG_H
$(eval $(call BUILD_CONFIG_H_template,$(KERN_OBJS_DIR),$(KERN_OBJS_DIR)/$(LOCAL_CONFIG_H),default_CONFIG,_LOCAL_CONFIG_H) )
endif

$(foreach confh,$(config_include_HEADERS),$(eval $(call BUILD_CONFIG_H_template,$(KERN_OBJS_DIR),$(addprefix $(KERN_INCLUDE_DIR)/,$(confh)),$(basename $(notdir $(confh)))_DEFINES,\
_$(basename $(notdir $(confh)))_H \
)))

kern_config_h_stamp_files = $(addprefix $(KERN_OBJS_DIR)/,$(notdir $(addsuffix .stamp,$(config_include_HEADERS) $(LOCAL_CONFIG_H))))

# Add some hooks to standard passes
include-pass-local: $(kern_config_h_stamp_files)

endif

clean-local: clean-local-config-h

clean-local-config-h:
	@$(foreach confh,$(config_h_stamp_files) $(kern_config_h_stamp_files),\
	    if [ -e $(confh) ] ; then rm $(confh) ; fi ; \
	)
                                                                                 #OMK:sources-list.omk@Makefile.rules.rtems
# Rules that creates the list of files which are used during
# compilation. The list reflects conditional compilation depending on
# config.omk and other variables.

SOURCES_LIST_FN=sources.txt
ifndef SOURCES_LIST
SOURCES_LIST_DIR:=$(RELATIVE_DIR)
SOURCES_LIST:=$(OUTPUT_DIR)/$(SOURCES_LIST_DIR)/$(SOURCES_LIST_FN)
SOURCES_LIST_D := $(LOCAL_BUILD_DIR)/$(SOURCES_LIST_FN).d
export SOURCES_LIST SOURCES_LIST_DIR SOURCES_LIST_D
endif

ifneq ($(filter sources-list TAGS tags cscope,$(MAKECMDGOALS)),)
NEED_SOURCES_LIST=y
endif

ifeq ($(NEED_SOURCES_LIST),y) # avoid execution of find command bellow if it is not useful
.PHONY: sources-list
sources-list: $(SOURCES_LIST)

$(SOURCES_LIST): $(CONFIG_FILES) $(shell find -name $(MAKEFILE_OMK))
	@$(call mkdir_def,$(dir $(SOURCES_LIST_D)))
	@echo -n "" > "$(SOURCES_LIST).tmp"
	@echo -n "" > "$(SOURCES_LIST_D).tmp"
	@$(MAKE) --no-print-directory sources-list-pass
	@echo "# Automatically generated list of files in '$(RELATIVE_DIR)' that are used during OMK compilation" > "$(SOURCES_LIST).tmp2"
	@cat "$(SOURCES_LIST).tmp"|sort|uniq >> "$(SOURCES_LIST).tmp2"
	@rm "$(SOURCES_LIST).tmp"
	@mv "$(SOURCES_LIST).tmp2" "$(SOURCES_LIST)"
	@echo "$(SOURCES_LIST): \\" > "$(SOURCES_LIST_D).tmp2"
	@cat "$(SOURCES_LIST_D).tmp"|grep -v "$(SOURCES_LIST_D).tmp"|sort|uniq|\
		sed -e 's/$$/\\/' >> "$(SOURCES_LIST_D).tmp2"
	@rm "$(SOURCES_LIST_D).tmp"
	@mv "$(SOURCES_LIST_D).tmp2" "$(SOURCES_LIST_D)"
endif

$(eval $(call omk_pass_template,sources-list-pass,$$(LOCAL_BUILD_DIR),,always))

sources-list-pass-local:
	@$(foreach m,$(MAKEFILE_LIST),echo '  $(m)' >> "$(SOURCES_LIST_D).tmp";)
	@$(foreach h,$(include_HEADERS) $(nobase_include_HEADERS) $(kernel_HEADERS),\
	  echo "$(addsuffix /,$(RELATIVE_DIR:$(SOURCES_LIST_DIR)/%=%))$(h)" >> "$(SOURCES_LIST).tmp";)
	@$(foreach ch,$(config_include_HEADERS), \
	  echo "$(USER_INCLUDE_DIR:$(OUTPUT_DIR)/$(addsuffix /,$(SOURCES_LIST_DIR))%=%)/$(ch)" >> "$(SOURCES_LIST).tmp";)
	@$(foreach h,$(renamed_include_HEADERS),echo '$(h)'|sed -e 's|\(.*\)->.*|$(addsuffix /,$(RELATIVE_DIR:$(SOURCES_LIST_DIR)/%=%))\1|' >> "$(SOURCES_LIST).tmp";)
	@$(foreach bin,$(lib_LIBRARIES) $(shared_LIBRARIES) $(bin_PROGRAMS) $(test_PROGRAMS) $(utils_PROGRAMS) \
	  $(kernel_LIBRARIES) $(rtlinux_LIBRARIES) $(kernel_MODULES),\
	  $(foreach src,$(filter-out %.o,$($(bin)_SOURCES)),echo "$(addsuffix /,$(RELATIVE_DIR:$(SOURCES_LIST_DIR)/%=%))$(src)" >> "$(SOURCES_LIST).tmp";))

############ TAGS ###########

ifeq ($(MAKECMDGOALS),TAGS)
ETAGS=etags
TAGS_CMD = $(ETAGS)
TAGS: $(SOURCES_LIST)
	@$(MAKE) --no-print-directory do-tags
endif
ifeq ($(MAKECMDGOALS),tags) 
CTAGS=ctags -N
TAGS_CMD = $(CTAGS)
tags: $(SOURCES_LIST)
	@$(MAKE) --no-print-directory do-tags
endif
export TAGS_CMD

ifeq ($(MAKECMDGOALS),do-tags)
.PHONY: do-tags
do-tags: $(shell sed -e '/^\#/d' $(SOURCES_LIST))
	@$(QUIET_CMD_ECHO) "  TAGS    $(SOURCES_LIST_FN)"
	$(Q)$(TAGS_CMD) $^
endif

############ CSCOPE ###########

cscope: $(SOURCES_LIST)
	@$(QUIET_CMD_ECHO) "  CSCOPE  < $(SOURCES_LIST_FN)"
	$(Q)sed -e '/^#/d' $(SOURCES_LIST) > cscope.files
	$(Q)cscope -b -icscope.files
#FIXME: see doc to -i in cscope(1)
