# `configure' configures this package to adapt to many kinds of systems.
# 
# Usage: ../../gcc/configure [OPTION]... [VAR=VALUE]...
# 
# To assign environment variables (e.g., CC, CFLAGS...), specify them as
# VAR=VALUE.  See below for descriptions of some of the useful variables.
# 
# Defaults for the options are specified in brackets.
# 
# Configuration:
#   -h, --help              display this help and exit
#       --help=short        display options specific to this package
#       --help=recursive    display the short help of all the included packages
#   -V, --version           display version information and exit
#   -q, --quiet, --silent   do not print `checking...' messages
#       --cache-file=FILE   cache test results in FILE [disabled]
#   -C, --config-cache      alias for `--cache-file=config.cache'
#   -n, --no-create         do not create output files
#       --srcdir=DIR        find the sources in DIR [configure dir or `..']
# 
# Installation directories:
#   --prefix=PREFIX         install architecture-independent files in PREFIX
#                           [/usr/local]
#   --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
#                           [PREFIX]
# 
# By default, `make install' will install all the files in
# `/usr/local/bin', `/usr/local/lib' etc.  You can specify
# an installation prefix other than `/usr/local' using `--prefix',
# for instance `--prefix=$HOME'.
# 
# For better control, use the options below.
# 
# Fine tuning of the installation directories:
#   --bindir=DIR           user executables [EPREFIX/bin]
#   --sbindir=DIR          system admin executables [EPREFIX/sbin]
#   --libexecdir=DIR       program executables [EPREFIX/libexec]
#   --datadir=DIR          read-only architecture-independent data [PREFIX/share]
#   --sysconfdir=DIR       read-only single-machine data [PREFIX/etc]
#   --sharedstatedir=DIR   modifiable architecture-independent data [PREFIX/com]
#   --localstatedir=DIR    modifiable single-machine data [PREFIX/var]
#   --libdir=DIR           object code libraries [EPREFIX/lib]
#   --includedir=DIR       C header files [PREFIX/include]
#   --oldincludedir=DIR    C header files for non-gcc [/usr/include]
#   --infodir=DIR          info documentation [PREFIX/info]
#   --mandir=DIR           man documentation [PREFIX/man]
# 
# Program names:
#   --program-prefix=PREFIX            prepend PREFIX to installed program names
#   --program-suffix=SUFFIX            append SUFFIX to installed program names
#   --program-transform-name=PROGRAM   run sed PROGRAM on installed program names
# 
# System types:
#   --build=BUILD     configure for building on BUILD [guessed]
#   --host=HOST       cross-compile to build programs to run on HOST [BUILD]
#   --target=TARGET   configure for building compilers for TARGET [HOST]
# 
# Optional Features:
#   --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
#   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
#   --enable-generated-files-in-srcdir
#                           put copies of generated files in source dir
#                           intended for creating source tarballs for users
#                           without texinfo bison or flex.
#   --enable-werror         enable -Werror in bootstrap stage2 and later
#   --enable-checking=LIST
# 			  enable expensive run-time checks.  With LIST,
# 			  enable only specific categories of checks.
# 			  Categories are: misc,tree,rtl,rtlflag,gc,gcac,fold;
# 			  default is no checking
#   --enable-coverage=LEVEL
# 			  enable compiler\'s code coverage collection.
# 			  Use to measure compiler performance and locate
# 			  unused parts of the compiler. With LEVEL, specify
# 			  optimization. Values are opt, noopt,
# 			  default is noopt
#   --enable-gather-detailed-mem-stats         enable detailed memory allocation stats gathering
#   --enable-multilib       enable library support for multiple ABIs
#   --enable-__cxa_atexit   enable __cxa_atexit for C++
#   --enable-threads        enable thread usage for target GCC
#   --enable-threads=LIB    use LIB thread package for target GCC
#   --enable-objc-gc	  enable the use of Boehm's garbage collector with
# 			  the GNU Objective-C runtime
#   --disable-shared        don't provide a shared libgcc
#   --enable-intermodule    build the compiler in one step
#   --enable-initfini-array	use .init_array/.fini_array sections
#   --enable-sjlj-exceptions
#                           arrange to use setjmp/longjmp exception handling
#   --enable-libunwind-exceptions  force use libunwind for exceptions
#   --disable-win32-registry
#                           disable lookup of installation paths in the
#                           Registry on Windows hosts
#   --enable-win32-registry enable registry lookup (default)
#   --enable-win32-registry=KEY
#                           use KEY instead of GCC version as the last portion
#                           of the registry key
#   --enable-maintainer-mode
#                           enable make rules and dependencies not useful
#                           (and sometimes confusing) to the casual installer
#   --enable-version-specific-runtime-libs
#                           specify that runtime libraries should be
#                           installed in a compiler-specific directory
# 
# Optional Packages:
#   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
#   --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
#   --with-local-prefix=DIR specifies directory to put local include
#   --with-gxx-include-dir=DIR
#                           specifies directory to put g++ header files
#   --with-cpp-install-dir=DIR
#                           install the user visible C preprocessor in DIR
#                           (relative to PREFIX) as well as PREFIX/bin
#   --with-gnu-ld           arrange to work with GNU ld.
#   --with-ld               arrange to use the specified ld (full pathname)
#   --with-gnu-as           arrange to work with GNU as
#   --with-as               arrange to use the specified as (full pathname)
#   --with-stabs            arrange to use stabs instead of host debug format
#   --with-dwarf2           force the default debug format to be DWARF 2
#   --with-sysroot=DIR Search for usr/lib, usr/include, et al, within DIR.
#   --with-libiconv-prefix=DIR  search for libiconv in DIR/include and DIR/lib
#   --with-gc={simple,page,zone} choose the garbage collection mechanism to use
#                           with the compiler
#   --with-system-zlib      use installed libz
#   --with-slibdir=DIR      shared libraries in DIR LIBDIR
# 
# Some influential environment variables:
#   CC          C compiler command
#   CFLAGS      C compiler flags
#   LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
#               nonstandard directory <lib dir>
#   CPPFLAGS    C/C++ preprocessor flags, e.g. -I<include dir> if you have
#               headers in a nonstandard directory <include dir>
#   CPP         C preprocessor
# 
# Use these variables to override the choices made by `configure' or to help
# it to find libraries and programs with nonstandard names/locations.
# 
# ../configure --prefix=/usr --libdir=/usr/lib --with-slibdir=/lib
# --mandir=/usr/share/man --infodir=/usr/share/info --enable-shared 
# --enable-threads=posix --disable-checking --enable-long-long
# --enable-__cxa_atexit --enable-clocale=gnu --disable-libunwind-exceptions
# --enable-languages=c,c++,f77,objc,java --host=i586-mandrake-linux-gnu
# --with-system-zlib
# --with-sysroot=DIR --with-headers=DIR --without-headers --with-libs=``DIR1 DIR2 ... DIRN'' 
#
# ../gcc-3.4.0/configure --target=arm-linux --prefix=/usr/local/arm920/3.4.0 --host=i686-pc-linux-gnu --with-cpu=arm9 \
# --with-headers=/usr/src/arm920/elroy-jack/sw/linux-2.6.6/include --disable-shared --disable-threads --enable-languages=c \
# --with-float=soft --disable-nls --enable--symvers=gnu --enable-__cxa_atexit
# make
# make install
#
# ../glibc-2.3.2/configure --host=arm-linux --build=i686-pc-linux-gnu \
# --with-headers=/usr/src/arm920/elroy-jack/sw/linux-2.6.6/include  \
# --enable-add-ons=linuxthreads --enable-shared --prefix=/usr/local/arm920/3.4.0 \
# --with-cpu=arm9 --without-fp --enable-kernel=2.6.6
# make
# make install

../../../gcc/configure --target=arm-rtems --prefix=/usr \
	     --with-cpu=arm9 \
             --enable-languages=c,c++ \
	     --with-gnu-ld \
	     --with-float=soft \
	     --enable-threads=rtems \
	     --enable-target-optspace \
             --verbose \
	     --disable-nls \
             --host=i586-pc-linux-gnu \
	     --with-newlib
